plugins {
    id 'java'
    id 'maven-publish'
    id "checkstyle"
    id "jacoco"
    id 'signing'
    id 'net.researchgate.release' version '2.8.1'
}

group = 'com.github.growthbook'
version = '0.0.0-SNAPSHOT'

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
    maven { url = uri('https://jitpack.io') }
    flatDir {
        dirs("/Users/mc/GrowthBook/workspace/growthbook-sdk-java/lib/build/libs")
    }
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation 'dev.openfeature:sdk:[1.12.2,2.0.0)'
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'com.github.growthbook:growthbook-sdk-java:0.9.92'
    //implementation(":lib-main-SNAPSHOT:")


    // Test dependencies - Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
    //testImplementation 'org.mockito:mockito-inline:5.3.1'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    dependsOn 'cleanTest'
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

checkstyle {
    toolVersion = "9.3"
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    checkstyleTest.enabled = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name.set('GrowthBook OpenFeature Provider Java')
                description.set('An OpenFeature provider for GrowthBook in Java.')
                url.set('https://github.com/growthbook/growthbook-openfeature-provider-java')

                licenses {
                    license {
                        name.set('Apache License, Version 2.0')
                        url.set('https://www.apache.org/licenses/LICENSE-2.0.html')
                    }
                }
                developers {
                    developer {
                        id.set('GrowthBook Engineering')
                        name.set('GrowthBook Engineering')
                        email.set('engineering@growthbook.io')
                    }
                }
                scm {
                    connection.set('scm:git:git://github.com/growthbook/growthbook-openfeature-provider-java.git')
                    developerConnection.set('scm:git:ssh://git@github.com:your-repo/growthbook-openfeature-provider-java.git')
                    url.set('https://github.com/growthbook/growthbook-openfeature-provider-java')
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = true
    preTagCommitMessage = "[Gradle Release Plugin] - pre tag commit:"
    tagCommitMessage = "[Gradle Release Plugin] - creating tag:"
    newVersionCommitMessage = "[Gradle Release Plugin] - new version commit:"
    git {
        requireBranch = 'main'
    }
}

def isSnapshot = version.endsWith("-SNAPSHOT")